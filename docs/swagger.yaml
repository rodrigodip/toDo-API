basePath: /
definitions:
  request.TaskRequest:
    properties:
      description:
        description: |-
          @json
          @jsonTag description
          @jsonExample Buy fuel for the lawn mower
          @binding min=3,max=30
        maxLength: 50
        type: string
      title:
        description: |-
          @json
          @jsonTag title
          @jsonExample Mow the lawn
          @binding required,min=3,max=30
        maxLength: 30
        minLength: 3
        type: string
    required:
    - title
    type: object
  response.TaskResponse:
    properties:
      completed:
        type: boolean
      description:
        maxLength: 50
        type: string
      id:
        type: integer
      title:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - title
    type: object
  rest_err.RestErr:
    properties:
      code:
        type: integer
      error:
        type: string
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for crud operations on tasks
  title: toDo-API
  version: "1.0"
paths:
  /allTasks:
    get:
      consumes:
      - application/json
      description: Retrieves all Tasks details.
      produces:
      - application/json
      responses:
        "200":
          description: Tasks information retrieved successfully
          schema:
            $ref: '#/definitions/response.TaskResponse'
        "400":
          description: 'Error: ID must be a number'
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "404":
          description: 'Error: ID not found'
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      summary: Find all Tasks
      tags:
      - Tasks
  /createTask:
    post:
      consumes:
      - application/json
      description: Create a new task with the provided title and description
      parameters:
      - description: Task information for registration
        in: body
        name: TaskRequest
        required: true
        schema:
          $ref: '#/definitions/request.TaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.TaskResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      summary: Create a new task
      tags:
      - Tasks
  /deleteTask/{taskId}:
    delete:
      consumes:
      - application/json
      description: Deletes a task based on the ID provided as a parameter.
      parameters:
      - description: ID of the task to be deleted
        in: path
        name: taskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task {taskId} was Deleted
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      summary: Delete task
      tags:
      - Tasks
  /setTaskDone/{taskId}:
    put:
      consumes:
      - application/json
      description: Defines a task as completed based on the ID provided as a parameter.
      parameters:
      - description: ID of the task to be completed
        in: path
        name: taskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task {taskId} setted as Done
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      summary: Mark a task as completed
      tags:
      - Tasks
  /taskById/{tasksId}:
    get:
      consumes:
      - application/json
      description: Retrieves Tasks details based on the Tasks ID provided as a parameter.
      parameters:
      - description: ID of the Tasks to be retrieved
        in: path
        name: tasksId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tasks information retrieved successfully
          schema:
            $ref: '#/definitions/response.TaskResponse'
        "400":
          description: 'Error: ID must be a number'
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "404":
          description: 'Error: ID not found'
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      summary: Find Tasks by ID
      tags:
      - Tasks
  /updateTask/{TaskId}:
    put:
      consumes:
      - application/json
      description: Updates Tasks details based on the ID provided as a parameter.
      parameters:
      - description: ID of the Tasks to be updated
        in: path
        name: TaskId
        required: true
        type: string
      - description: Tasks information for update
        in: body
        name: TasksRequest
        required: true
        schema:
          $ref: '#/definitions/request.TaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      summary: Update Tasks
      tags:
      - Tasks
schemes:
- http
swagger: "2.0"
